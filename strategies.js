strategies = {"AdvisorBM":"{\r\n  name: 'AdvisorBM'\r\n  requires: ['Advisor']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Advisor\"\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n}\r\n","BankWharf":"# Play Big Money including Banks, except buy Wharf with every $5 buy.\r\n{\r\n  name: 'BankWharf'\r\n  author: 'Geronimoo' #tweaked by Jorbles\r\n  requires: ['Bank', 'Wharf']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\r\n    \"Duchy\" if state.gainsToEndGame() <= 4\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Bank\"\r\n    \"Gold\"\r\n    \"Wharf\"\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n}\r\n","BeggarGardens":"{\r\n  name: 'BeggarGardens'\r\n  author: 'ragingduckd', 'DStu'\r\n  requires: ['Beggar', 'Gardens']\r\n  \r\n  gainPriority: (state, my) ->  \r\n    if state.supply[\"Rebuild\"]?\r\n      if my.turnsTaken < 3 or state.countInSupply(\"Rebuild\") < 10\r\n        return this.gainPriorityRebuild(state, my)\r\n      else\r\n        return this.gainPriorityDefault(state, my)\r\n    else\r\n      return this.gainPriorityDefault(state, my)\r\n  \r\n  gainPriorityRebuild: (state, my) -> [\r\n    \"Province\"\r\n    \"Duchy\"\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Beggar\" if my.countInDeck(\"Beggar\") < 2\r\n    \"Gardens\"\r\n    \"Duchy\"\r\n    \"Beggar\"\r\n    \"Estate\"\r\n    \"Copper\"\r\n  ]\r\n  \r\n  gainPriorityDefault: (state, my) -> [\r\n    \"Gardens\"\r\n    \"Duchy\"\r\n    \"Estate\" if state.gainsToEndGame() <= 4\r\n    \"Beggar\"\r\n    \"Silver\"\r\n    \"Estate\"\r\n    \"Copper\"\r\n  ]\r\n  \r\n  wantsToDiscardBeggar: (state, my) ->\r\n    if my.countInHand(\"Beggar\") > 1\r\n      return true\r\n    else\r\n      return false\r\n}\r\n","BigEnvoy":"{\r\n  name: 'BigEnvoy'\r\n  requires: ['Envoy']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 \\\r\n               or state.countInSupply(\"Province\") <= 6\r\n    \r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Envoy\" if my.countInDeck(\"Envoy\") < 1\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n}\r\n\r\n","BigJourneyman":"{\r\n  name: 'BigJourneyman'\r\n  requires: ['Journeyman']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 \\\r\n               or state.countInSupply(\"Province\") <= 6\r\n    \r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Journeyman\" if my.countInDeck(\"Journeyman\") < 2 \\\r\n                 and my.numCardsInDeck() >= 18\r\n    \"Journeyman\" if my.countInDeck(\"Journeyman\") < 1\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n\r\n  wantsToJM: (state, my) -> \r\n    #my.draw.length >= 3\r\n    true\r\n\r\n  skipPriority: (state, my) -> [\r\n    \"Copper\" if my.getTotalMoney() / my.numCardsInDeck() > 1\r\n    \"Province\" if my.countInDeck(\"Province\") > my.countInDeck(\"Duchy\") \\\r\n               and my.countInDeck(\"Province\") > my.countInDeck(\"Estate\") \r\n    \"Duchy\" if my.countInDeck(\"Duchy\") > my.countInDeck(\"Estate\") \r\n    \"Estate\"\r\n  ]\r\n}\r\n\r\n","BigMoney":"# This is an implementation of the pure Big Money strategy, updated\r\n# based on WanderingWinder's forum posts:\r\n# http://forum.dominionstrategy.com/index.php?topic=625\r\n{\r\n  name: 'Big Money'\r\n  author: 'WanderingWinder'\r\n  requires: []\r\n  gainPriority: (state, my) -> \r\n    if state.supply.Colony?\r\n      [\r\n        \"Colony\" if my.getTotalMoney() > 32\r\n        \"Province\" if state.gainsToEndGame() <= 6\r\n        \"Duchy\" if state.gainsToEndGame() <= 5\r\n        \"Estate\" if state.gainsToEndGame() <= 2\r\n        \"Platinum\"\r\n        \"Province\" if state.countInSupply(\"Colony\") <= 7\r\n        \"Gold\"\r\n        \"Duchy\" if state.gainsToEndGame() <= 6\r\n        \"Silver\"\r\n        \"Copper\" if state.gainsToEndGame() <= 2\r\n      ]\r\n    else\r\n      [\r\n        \"Province\" if my.getTotalMoney() > 18\r\n        \"Duchy\" if state.gainsToEndGame() <= 4\r\n        \"Estate\" if state.gainsToEndGame() <= 2\r\n        \"Gold\"\r\n        \"Duchy\" if state.gainsToEndGame() <= 6\r\n        \"Silver\"\r\n      ]\r\n}\r\n\r\n","BigMoneyBaker":"#strategy to test the Baker, NOT optimized\r\n{\r\n  name: 'Big Money-Baker'\r\n  author: 'DStu'\r\n  requires: ['Baker']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" if my.getTotalMoney() > 18\r\n    \"Duchy\" if state.gainsToEndGame() <= 4\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Baker\"\r\n    \"Silver\"\r\n  ]\r\n}\r\n\r\n","BigNothing":"# This is an implementation of the pure Big Money strategy, updated\r\n# based on WanderingWinder's forum posts:\r\n# http://forum.dominionstrategy.com/index.php?topic=625\r\n{\r\n  name: 'Big Nothing'\r\n  requires: []\r\n  gainPriority: (state, my) -> \r\n    if state.supply.Colony?\r\n      [\r\n      ]\r\n    else\r\n      [\r\n      ]\r\n}\r\n\r\n","BigSmithy":"{\r\n  name: 'BigSmithy'\r\n  requires: ['Smithy']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 \\\r\n               or state.countInSupply(\"Province\") <= 6\r\n    \r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Smithy\" if my.countInDeck(\"Smithy\") < 2 \\\r\n             and my.numCardsInDeck() >= 16\r\n    \"Smithy\" if my.countInDeck(\"Smithy\") < 1\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n}\r\n\r\n","BM_Library":"{\r\n  name: 'BM Library'\r\n  requires: ['Library']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Library\"\r\n    \"Silver\"\r\n  ]\r\n}\r\n","BM_Masquerade":"# ehunt described this strategy in words on the Dominion Strategy Forum,\r\n# describing it as a \"fun, if sobering, experiment\" to play Masquerade\r\n# completely algorithmically in a real game.\r\n#\r\n# \"Do not try to tweak big money masquerade. Instead, let big money\r\n# masquerade tweak you.\"\r\n{\r\n  name: 'BM Masquerade'\r\n  requires: ['Masquerade']\r\n  author: 'ehunt'\r\n  gainPriority: (state, my) -> \r\n    [\r\n      \"Province\"\r\n      \"Gold\"\r\n      \"Duchy\" if state.gainsToEndGame() <= 5\r\n      \"Masquerade\" if my.countInDeck(\"Masquerade\") == 0\r\n      \"Silver\"\r\n    ]\r\n}\r\n\r\n","ChapelMountebank":"# Gain one Chapel and one Mountebank, and otherwise play Big Money.\r\n{\r\n  name: 'ChapelMountebank'\r\n  requires: ['Chapel', 'Mountebank']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\r\n    \"Mountebank\" if my.countInDeck(\"Mountebank\") == 0\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \r\n    # If this bot somehow gets rid of its chapel later in the game,\r\n    # it won't try to acquire another one.\r\n    \"Chapel\" if my.coins <= 3 and my.countInDeck(\"Chapel\") == 0 and my.turnsTaken <= 2\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n}\r\n","ChapelWitch":"# Gain one Chapel and one Witch, and otherwise play Big Money. One of the most\r\n# powerful two-card strategies there is.\r\n{\r\n  name: 'ChapelWitch'\r\n  requires: ['Chapel', 'Witch']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\r\n    \"Witch\" if my.countInDeck(\"Witch\") == 0\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \r\n    # If this bot somehow gets rid of its chapel later in the game,\r\n    # it won't try to acquire another one.\r\n    \"Chapel\" if my.coins <= 3 and my.countInDeck(\"Chapel\") == 0 and my.turnsTaken <= 2\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n\r\n  trashPriority: (state, my) -> [\r\n    \"Curse\"\r\n    \"Estate\" if state.gainsToEndGame() > 4\r\n    \"Copper\" if my.getTotalMoney() > 4\\\r\n             and not (my.countInDeck(\"Witch\") == 0 and my.getTreasureInHand() == 5)\r\n    \"Estate\" if state.gainsToEndGame() > 2\r\n  ]\r\n\r\n}\r\n","ChapelYoungWitch":"{\r\n  name: 'ChapelYoungWitch'\r\n  requires: ['Chapel', 'Young Witch']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\r\n    \"Young Witch\" if my.countInDeck(\"Young Witch\") == 0\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \r\n    # If this bot somehow gets rid of its chapel later in the game,\r\n    # it won't try to acquire another one.\r\n    \"Chapel\" if my.coins <= 3 and my.countInDeck(\"Chapel\") == 0 and my.turnsTaken <= 2\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n\r\n  trashPriority: (state, my) -> [\r\n    \"Curse\"\r\n    \"Estate\" if state.gainsToEndGame() > 4\r\n    \"Copper\" if my.getTotalMoney() > 4\\\r\n             and not (my.countInDeck(\"Witch\") == 0 and my.getTreasureInHand() == 5)\r\n    \"Estate\" if state.gainsToEndGame() > 2\r\n  ]\r\n\r\n}\r\n","Develop":"# This Bot does not win anything, but it demonstrates how to configure Develop...\r\n# Feel free to write a Develop-bot that wins...\r\n{\r\n  name: 'Develop'\r\n  author: 'DStu'\r\n  requires: [\"Develop\", \"Talisman\", \"Festival\", \"Watchtower\", \"Oasis\"]\r\n  gainPriority: (state, my) -> [\r\n     \"Province\" if my.getTotalMoney() > 18\r\n     \"Talisman\" if my.countInDeck(\"Talisman\") < 2 and my.countInDeck(\"Develop\") > 0\r\n     \"Festival\" if my.countInDeck(\"Festival\") < 1\r\n     \"Oasis\" if my.countInDeck(\"Oasis\") < 1\r\n     \"Develop\" if my.countInDeck(\"Develop\") < 1\r\n     \"Watchtower\" if my.countInDeck(\"Watchtower\") < 2\r\n     \"Festival\"\r\n     \"Oasis\"\r\n    ]\r\n    \r\n  developPriority: (state, my) -> [\r\n    [\"Talisman\", [\"Festival\", \"Watchtower\"]]\r\n    [\"Estate\", [\"Oasis\", null]]\r\n    [\"Copper\", [null, null]]\r\n  ]\r\n  \r\n  actionPriority: (state, my) -> [\r\n   \"Festival\"\r\n   \"Oasis\"\r\n   \"Watchtower\" if (my.actions > 1 and my.hand.length < 5)\r\n   \"Develop\" if my.countInHand(\"Talisman\") > 1\r\n   \"Develop\" if my.countInHand(\"Estate\") > 1\r\n   \"Develop\" if my.countInHand(\"Copper\") > 1\r\n   \"Watchtower\"\r\n  ]\r\n    \r\n  discardPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Duchy\"\r\n    \"Estate\" \r\n    \"Copper\"\r\n    \"Develop\" \r\n    \"Talisman\"  \r\n    \"Silver\"\r\n    \"Watchtower\"\r\n    \"Festival\"\r\n    \"Gold\"\r\n  ]\r\n}\r\n","DoubleAmbassador":"{\r\n  name: 'Double Ambassador'\r\n  author: 'rspeer'\r\n  requires: ['Ambassador']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Ambassador\" if my.countInDeck(\"Ambassador\") < 2\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n\r\n  discardPriority: (state, my) -> [\r\n    \"Colony\"\r\n    \"Duchy\"\r\n    \"Province\"\r\n    \"Ambassador\" if my.countInHand(\"Ambassador\") > 1\r\n    \"Estate\" if my.countInHand(\"Ambassador\") == 0 \\\r\n             or state.gainsToEndGame <= 5\r\n    \"Curse\" if my.countInHand(\"Ambassador\") == 0 \\\r\n            or state.gainsToEndGame <= 5\r\n    \"Copper\"\r\n    \"Estate\"\r\n    \"Curse\"\r\n    null\r\n    \"Silver\"\r\n  ]\r\n}\r\n","DoubleGhostShip":"{\r\n  name: 'DoubleGhostShip'\r\n  requires: ['Ghost Ship']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\r\n    \"Ghost Ship\" if my.countInDeck(\"Ghost Ship\") < 2\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Silver\"\r\n  ]\r\n}\r\n","DoubleGoons":"{\r\n  name: 'DoubleGoons'\r\n  requires: ['Goons']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Goons\" if my.countInDeck(\"Goons\") < 2\r\n    \"Gold\"\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 4 \\\r\n             and my.countInPlay(\"Goons\") > 0\r\n  ]\r\n}\r\n","DoubleJack":"# Buys two Jacks of All Trades and otherwise plays a version of Big Money.\r\n#\r\n# This has no Colony rules, because it would be a terrible strategy in\r\n# Colony games.\r\n{\r\n  name: 'DoubleJack'\r\n  author: 'rspeer'\r\n  requires: [\"Jack of All Trades\"]\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" if my.getTotalMoney() > 15\r\n    \"Duchy\" if state.gainsToEndGame() <= 5\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Jack of All Trades\" if my.countInDeck(\"Jack of All Trades\") < 2\r\n    \"Silver\"\r\n  ]\r\n}\r\n","DoubleMilitia":"{\r\n  name: 'DoubleMilitia'\r\n  requires: ['Militia']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Militia\" if my.countInDeck(\"Militia\") < 2\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n}\r\n","DoubleMountebank":"{\r\n  name: 'DoubleMountebank'\r\n  requires: ['Mountebank']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\r\n    \"Duchy\" if state.gainsToEndGame() <= 5\r\n    \"Mountebank\" if my.countInDeck(\"Mountebank\") < 2\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Silver\"\r\n  ]\r\n}\r\n","DoubleWitch":"{\r\n  name: 'DoubleWitch'\r\n  requires: ['Witch']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\r\n    \"Witch\" if my.countInDeck(\"Witch\") < 2\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Silver\"\r\n  ]\r\n}\r\n","DrunkenMarineStudents":"{\r\n  name: 'Drunk Marine Students'\r\n  author: 'Geronimoo'\r\n  requires: ['Potion', 'University', 'Vineyard', 'Wharf', 'Alchemist', 'Bazaar', 'Wharf']\r\n  gainPriority: (state, my) -> [\r\n    \"Vineyard\" if my.numActionCardsInDeck() > 11\r\n    \"Province\"\r\n    \"Duchy\" if state.countInSupply(\"Province\") <= 2\r\n    \"Estate\" if state.countInSupply(\"Province\") <= 1\r\n    \"University\" if my.countInDeck(\"University\") < 3\r\n    \"Wharf\" if my.countInDeck(\"University\") + my.countInDeck(\"Bazaar\") > my.countInDeck(\"Wharf\")\r\n    \"Scrying Pool\" if my.numActionCardsInDeck() > 3\r\n    \"Alchemist\"\r\n    \"Bazaar\"\r\n    \"Potion\" if my.countInDeck(\"Potion\") < 3\r\n    \"Silver\"\r\n  ]\r\n}\r\n","DrunkMarineStudents":"{\r\n  name: 'Drunk Marine Students'\r\n  author: 'Geronimoo'\r\n  requires: ['Potion', 'University', 'Vineyard', 'Wharf', 'Alchemist', 'Bazaar', 'Wharf']\r\n  gainPriority: (state, my) -> [\r\n    \"Vineyard\" if my.numActionCardsInDeck() > 11\r\n    \"Province\"\r\n    \"Duchy\" if state.countInSupply(\"Province\") <= 2\r\n    \"Estate\" if state.countInSupply(\"Province\") <= 1\r\n    \"University\" if my.countInDeck(\"University\") < 3\r\n    \"Wharf\" if my.countInDeck(\"University\") + my.countInDeck(\"Bazaar\") > my.countInDeck(\"Wharf\")\r\n    \"Scrying Pool\" if my.numActionCardsInDeck() > 3\r\n    \"Alchemist\"\r\n    \"Bazaar\"\r\n    \"Potion\" if my.countInDeck(\"Potion\") < 3\r\n    \"Silver\"\r\n  ]\r\n}","DT2017CZ_BMBureaucrat":"{\r\n  name: 'BMBureaucrat'\r\n  author: 'Svatal'\r\n  requires: ['Bureaucrat', \"Squire\"]\r\n  gainPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Duchy\" if state.gainsToEndGame() <= 5\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Bureaucrat\" if my.countInDeck(\"Bureaucrat\") < 2\r\n    \"Silver\"\r\n    \"Squire\"\r\n  ]\r\n}\r\n","DT2017CZ_BMCouncilRoom":"{\r\n  name: 'BMCouncilRoom'\r\n  author: 'Svatal'\r\n  requires: ['Council Room', \"Squire\"]\r\n  gainPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Duchy\" if state.gainsToEndGame() <= 5\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Council Room\" if my.countInDeck(\"Council Room\") < 1 or my.countInDeck(\"Council Room\") < 2 and my.turnsTaken > 4\r\n    \"Silver\"\r\n    \"Squire\"\r\n  ]\r\n}\r\n","DT2017CZ_RemodelFeodum":"#uses Remodel to trash Feodum to gain Silvers\r\n{\r\n  name: 'RemodelFeodum'\r\n  author: 'Svatal'\r\n  requires: [\"Feodum\", \"Remodel\", \"Squire\"]\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" \r\n    \"Feodum\" if state.gainsToEndGame() <= 5\r\n    \"Duchy\" if state.gainsToEndGame() <= 5\r\n    \"Silver\" if state.gainsToEndGame() <= 5 and my.countInDeck(\"Feodum\") >= 3\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Remodel\" if my.countInDeck(\"Remodel\") < 2\r\n    \"Feodum\"\r\n    \"Silver\"\r\n    \"Squire\"\r\n  ]  \r\n  upgradePriority: (state, my) -> [\r\n    [\"Gold\", \"Province\"] if state.gainsToEndGame() <= 5\r\n    [\"Feodum\", \"Gold\"] if (3 * my.countInDeck(\"Feodum\")) > my.countInDeck(\"Silver\") and state.gainsToEndGame() > 5\r\n    [\"Feodum\", \"Feodum\"] if (3 * my.countInDeck(\"Feodum\")) > my.countInDeck(\"Silver\") and state.gainsToEndGame() <= 5\r\n    [\"Feodum\", \"Duchy\"] if (3 * my.countInDeck(\"Feodum\")) > my.countInDeck(\"Silver\") and state.gainsToEndGame() <= 5\r\n    [\"Estate\", \"Feodum\"]\r\n    [\"Squire\", \"Feodum\"]\r\n    [\"Curse\", \"Squire\"]\r\n    [\"Copper\", \"Squire\"]\r\n  ]\r\n}\r\n","KCWharf":"# Buy Wharf with every $5 and King's Court with every $7. Probably not\r\n# optimized.\r\n{\r\n  name: 'KCWharf'\r\n  author: 'rspeer'\r\n  requires: [\"King's Court\", \"Wharf\"]\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"King's Court\"\r\n    \"Gold\"\r\n    \"Wharf\"\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n}\r\n","LordBottington":"{\r\n  name: 'LordBottington'\r\n  requires: ['Rats']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Rats\" if my.countInDeck(\"Rats\") < 2\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n\r\n  wantsToPlayRats: (state, my) ->\r\n    100 * Math.random() < 90\r\n}\r\n","MasterpieceFeodum":"#simple version of Masterpiece/Feodum, not optimized but wins against BigMoney+X\r\n{\r\n  name: 'MasterpieceFeodum'\r\n  author: 'DStu'\r\n  requires: ['Masterpiece', 'Feodum']\r\n  gainPriority: (state, my) -> [\r\n    \"Masterpiece\" if my.coins >= 5\r\n    \"Feodum\" if my.countInDeck(\"Silver\") > 8\r\n    \"Duchy\" if my.countInDeck(\"Feodum\") > 0\r\n    \"Estate\" if state.countInSupply(\"Feodum\") == 0\r\n    \"Silver\"\r\n    \"Estate\"\r\n    \"Copper\"\r\n  ]\r\n}\r\n  \r\n","MoneylenderWitch":"# Not necessarily a good strategy.\r\n{\r\n  name: 'MoneylenderWitch'\r\n  requires: ['Moneylender', 'Witch']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\r\n    \"Witch\" if my.countInDeck(\"Witch\") < 2\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Moneylender\" if my.countInDeck(\"Moneylender\") == 0\r\n    \"Silver\"\r\n  ]\r\n}\r\n","OBM_Adventurer":"# Optimized version of Big Money + Adventurer\r\n{\r\n  name: 'OBM Adventurer'\r\n  author: 'WanderingWinder'\r\n  requires: ['Adventurer']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" if my.countInDeck(\"Gold\") > 0\r\n    \"Duchy\" if state.countInSupply(\"Province\") <= 4\r\n    \"Estate\" if state.countInSupply(\"Province\") <= 2\r\n    \"Adventurer\" if state.countInSupply(\"Gold\") > 0 \\\r\n                 and my.countInDeck(\"Adventurer\") == 0\r\n    \"Gold\"\r\n    \"Duchy\" if state.countInSupply(\"Province\") <= 5\r\n    \"Silver\"\r\n  ]\r\n}\r\n","OBM_Bazaar":"# Optimized version of Big Money + Bazaar\r\n{\r\n  name: 'OBM Bazaar'\r\n  author: 'WanderingWinder'\r\n  requires: ['Bazaar']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" if my.countInDeck(\"Gold\") > 0\r\n    \"Duchy\" if state.gainsToEndGame() <= 4\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Duchy\" if state.gainsToEndGame() <= 5\r\n    \"Bazaar\"\r\n    \"Silver\"\r\n  ]\r\n}\r\n\r\n","OBM_Bridge":"# Optimized version of Big Money + Bridge\r\n{\r\n  name: 'OBM Bridge'\r\n  author: 'WanderingWinder'\r\n  requires: ['Bridge']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" if my.countInDeck(\"Gold\") > 0\r\n    \"Duchy\" if state.gainsToEndGame() <= 4\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Duchy\" if state.gainsToEndGame() <= 6\r\n    \"Bridge\" if my.countInDeck(\"Bridge\") <= my.countCardTypeInDeck(\"Treasure\") / 10\r\n    \"Bridge\" if my.countInDeck(\"Bridge\") == 0\r\n    \"Silver\"\r\n  ]\r\n}\r\n\r\n","OBM_Chancellor":"{\r\n  name: 'OBM Chancellor'\r\n  author: 'rspeer'\r\n  requires: ['Chancellor']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" if my.getTotalMoney() > 18\r\n    \"Duchy\" if state.gainsToEndGame() <= 4\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Duchy\" if state.gainsToEndGame() <= 6\r\n    \"Chancellor\" if my.countInDeck(\"Chancellor\") < 1\r\n    \"Silver\"\r\n  ]\r\n}\r\n\r\n","OBM_Coppersmith":"# Plays Coppersmith on 5/2 starts; plays Big Money otherwise.\r\n{\r\n  name: 'OBM Coppersmith'\r\n  author: 'HiveMindEmulator'\r\n  requires: ['Coppersmith']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" if my.getTotalMoney() > 18\r\n    \"Duchy\" if state.gainsToEndGame() <= 4\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Duchy\" if state.gainsToEndGame() <= 6\r\n    \"Coppersmith\" if my.numCardsInDeck() == 10 and my.getAvailableMoney() == 5\r\n    \"Silver\"\r\n  ]\r\n}\r\n\r\n","OBM_Courtyard":"{\r\n  name: 'OBM Courtyard'\r\n  author: 'HiveMindEmulator'\r\n  requires: ['Courtyard']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" if my.countInDeck(\"Gold\") > 0\r\n    \"Duchy\" if state.gainsToEndGame() <= 4\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Duchy\" if state.gainsToEndGame() <= 5\r\n    \"Silver\" if my.countInDeck(\"Silver\") == 0\r\n    \"Courtyard\" if my.countInDeck(\"Courtyard\") == 0\r\n    \"Courtyard\" if my.countInDeck(\"Courtyard\") < my.countCardTypeInDeck(\"treasure\") / 8\r\n    \"Silver\"\r\n    \"Courtyard\" if my.countInDeck(\"Courtyard\") <= 1\r\n  ]\r\n}\r\n","OBM_Hunting_Party":"{\r\n  name: 'OBM Hunting Party'\r\n  author: 'DG'\r\n  requires: ['Hunting Party']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" if my.countInDeck(\"Gold\") > 0\r\n    \"Duchy\" if state.gainsToEndGame() <= 2\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\" if my.countInDeck(\"Gold\") == 0\r\n    \"Hunting Party\"\r\n    \"Gold\"\r\n    \"Estate\" if state.gainsToEndGame() <= 4\r\n    \"Silver\"\r\n  ]\r\n}\r\n","OBM_Monument":"# Optimized version of Big Money + Monument\r\n{\r\n  name: 'OBM Monument'\r\n  author: 'tko'\r\n  requires: ['Monument']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" if my.getTotalMoney() > 18\r\n    \"Duchy\" if state.gainsToEndGame() <= 4\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Duchy\" if state.gainsToEndGame() <= 5\r\n    \"Monument\" if my.countInDeck(\"Monument\") < 3\r\n    \"Silver\"\r\n  ]\r\n}\r\n\r\n","OBM_Nobles":"{\r\n  name: 'OBM Nobles'\r\n  author: 'rspeer'\r\n  requires: ['Nobles']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\"  \r\n    \"Duchy\" if state.gainsToEndGame() <= 4\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Nobles\" if my.countInDeck(\"Nobles\") < 1\r\n    \"Nobles\" if state.gainsToEndGame() <= 6\r\n    \"Gold\"\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 2\r\n  ]\r\n}\r\n","Rebuild":"{\r\n  name: 'Rebuild' \r\n  author: 'ragingduckd', 'SheCantSayNo'\r\n  requires: ['Rebuild']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 3 and state.countInSupply(\"Rebuild\") == 8\r\n    \"Duchy\"\r\n    \"Estate\" if state.gainsToEndGame() <= 1\r\n    \"Estate\" if state.gainsToEndGame() == 2 and my.ai.getScore(state, my) > -8\r\n    \"Gold\"\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Rebuild\" if (my.countInDeck(\"Duchy\") > 0 or my.ai.getScore(state, my) > 2)\\\r\n                and (state.countInSupply(\"Rebuild\") > 2 or my.ai.getScore(state, my) > 3 \\\r\n                or (state.countInSupply(\"Rebuild\") == 1 and my.ai.getScore(state, my) > 0))\r\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\r\n                and my.countInDeck(\"Estate\") == 0 \\\r\n                and state.countInSupply(\"Duchy\") >= 4\r\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\r\n                and state.countInSupply(\"Duchy\") == 0\r\n    \"Silver\"\r\n  ]\r\n\r\n  getScore: (state, my) -> \r\n    for status in state.getFinalStatus()\r\n      [name, score, turns] = status\r\n      if name == my.ai.toString()\r\n        myScore = score\r\n      else\r\n        opponentScore = score\r\n    return myScore - opponentScore\r\n\r\n  countNotInHand: (my, card) ->\r\n    return my.countInDeck(card) - my.countInHand(card)\r\n\r\n  countInDraw: (my, card) ->\r\n    return my.countInDeck(card) - my.countInHand(card) - my.countInDiscard(card)\r\n\r\n  wantsToRebuild: (state, my) ->\r\n    if my.countInHand(\"Rebuild\") >= state.countInSupply(\"Province\") \\\r\n       and my.ai.getScore(state, my) > 0\r\n          answer = 1\r\n    else if state.countInSupply(\"Province\") == 1 \\\r\n            and my.ai.getScore(state, my) < -4\r\n              answer = 0\r\n    else if state.countInSupply(\"Duchy\") == 0 \\\r\n            and my.ai.countNotInHand(my, \"Duchy\") == 0\\\r\n            and my.ai.getScore(state, my) < 0\r\n              answer = 0\r\n    else if my.getTreasureInHand() > 7 and state.countInSupply(\"Province\") == 1\r\n              answer = 0\r\n    else\r\n          answer = state.countInSupply(\"Province\") > 0\r\n    return answer\r\n\r\n  rebuildPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Duchy\"\r\n    \"Estate\"\r\n  ]\r\n\r\n  nameVPPriority: (state, my) -> [\r\n    \"Duchy\" if  state.countInSupply(\"Duchy\") > 0 \\\r\n            and my.ai.countNotInHand(my, \"Estate\") > 0 \\\r\n            and (my.ai.countNotInHand(my, \"Province\") == 0 \\\r\n                or  (my.ai.countInDraw(my, \"Province\") == 0 \\\r\n                    and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n                    and my.ai.countInDraw(my, \"Estate\") > 0))\r\n    \"Province\" if my.ai.countInDraw(my, \"Estate\") == 0 \\\r\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n               and my.ai.countInDraw(my, \"Province\") > 0\r\n    \"Province\" if my.ai.countNotInHand(my, \"Estate\") == 0 \\\r\n               and my.ai.countNotInHand(my, \"Duchy\") > 0 \\\r\n               and my.ai.countNotInHand(my, \"Province\") > 0\r\n    \"Estate\" if my.countInHand(\"Rebuild\") + 1 >= state.countInSupply(\"Province\") \\\r\n             and my.ai.getScore(state, my) > 0\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\r\n             and my.ai.countInDraw(my, \"Province\") == 0\r\n    \"Province\" if state.countInSupply(\"Duchy\") == 0 \\\r\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n               and my.ai.countInDraw(my, \"Province\") > \\\r\n               my.ai.countInDraw(my, \"Estate\") \r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\r\n             and my.ai.countInDraw(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 2\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Estate\") > 0 \\\r\n             and my.ai.countNotInHand(my, \"Duchy\") < 3 \\\r\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 4\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.countInDeck(\"Duchy\") == 0 \\\r\n             and my.ai.getScore(state, my) > 0\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 2\r\n    \"Province\" if my.ai.countNotInHand(my, \"Province\") > 0\r\n    \"Estate\"\r\n  ]\r\n} ","RebuildDuke":"{\r\n  name: 'RebuildDuke'\r\n  author: 'ragingduckd', 'SheCantSayNo'\r\n  requires: ['Rebuild', 'Duke']\r\n  gainPriority: (state, my) -> [    \r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\r\n    \"Duchy\"\r\n    \"Province\"\r\n    \"Duke\"    \r\n    \"Estate\" if my.countInDeck(\"Estate\") ==0 and my.countInDeck(\"Rebuild\") >= 2\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0\r\n    \"Rebuild\"\r\n    \"Silver\"\r\n  ]\r\n\r\n  wantsToRebuild: (state, my) ->\r\n    answer = state.countInSupply(\"Province\") > 0\r\n    return answer\r\n\r\n  rebuildPriority: (state, my) -> [\r\n    \"Duchy\"\r\n    \"Province\"\r\n    \"Duke\"\r\n    \"Estate\"\r\n  ]\r\n\r\n  nameVPPriority: (state, my) -> [\r\n    \"Duchy\"\r\n  ]\r\n}","RebuildDuke2":"{\r\n  name: 'RebuildDuke'\r\n  author: 'ragingduckd', 'SheCantSayNo'\r\n  requires: ['Rebuild', 'Duke']\r\n  gainPriority: (state, my) -> [    \r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 3\r\n    \"Duchy\"\r\n    \"Province\"\r\n    \"Duke\"    \r\n    \"Estate\" if my.countInDeck(\"Estate\") == 0 and my.countInDeck(\"Rebuild\") >= 2\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0\r\n    \"Rebuild\"\r\n    \"Silver\"\r\n  ]\r\n\r\n  wantsToRebuild: (state, my) ->\r\n    answer = state.countInSupply(\"Province\") > 0\r\n    return answer\r\n\r\n  rebuildPriority: (state, my) -> [\r\n    \"Duchy\"\r\n    \"Province\"\r\n    \"Duke\"\r\n    \"Estate\"\r\n  ]\r\n\r\n  nameVPPriority: (state, my) -> [\r\n    \"Duchy\"\r\n  ]\r\n}","RebuildHorse":"{\r\n  name: 'RebuildHorse'\r\n  author: 'ragingduckd', 'SheCantSayNo'\r\n  requires: ['Rebuild', 'Horse Traders']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 3 and state.countInSupply(\"Rebuild\") == 8\r\n    \"Duchy\"\r\n    \"Estate\" if state.gainsToEndGame() <= 1\r\n    \"Estate\" if state.gainsToEndGame() == 2 and my.ai.getScore(state, my) > -8\r\n    \"Gold\"\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Rebuild\" if (my.countInDeck(\"Duchy\") > 0 or my.ai.getScore(state, my) > 2)\\\r\n                and (state.countInSupply(\"Rebuild\") > 2 or my.ai.getScore(state, my) > 3 \\\r\n                or (state.countInSupply(\"Rebuild\") == 1 and my.ai.getScore(state, my) > 0))\r\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\r\n                and my.countInDeck(\"Estate\") == 0 \\\r\n                and state.countInSupply(\"Duchy\") >= 4\r\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\r\n                and state.countInSupply(\"Duchy\") == 0\r\n    \"Horse Traders\" if my.countInDeck(\"Horse Traders\") < 2\r\n    \"Silver\"\r\n  ]\r\n\r\n  getScore: (state, my) -> \r\n    for status in state.getFinalStatus()\r\n      [name, score, turns] = status\r\n      if name == my.ai.toString()\r\n        myScore = score\r\n      else\r\n        opponentScore = score\r\n    return myScore - opponentScore\r\n\r\n  countNotInHand: (my, card) ->\r\n    return my.countInDeck(card) - my.countInHand(card)\r\n\r\n  countInDraw: (my, card) ->\r\n    return my.countInDeck(card) - my.countInHand(card) - my.countInDiscard(card)\r\n\r\n  wantsToRebuild: (state, my) ->\r\n    if my.countInHand(\"Rebuild\") >= state.countInSupply(\"Province\") \\\r\n       and my.ai.getScore(state, my) > 0\r\n          answer = 1\r\n    else if state.countInSupply(\"Province\") == 1 \\\r\n            and my.ai.getScore(state, my) < -4\r\n              answer = 0\r\n    else if state.countInSupply(\"Duchy\") == 0 \\\r\n            and my.ai.countNotInHand(my, \"Duchy\") == 0\\\r\n            and my.ai.getScore(state, my) < 0\r\n              answer = 0\r\n    else if my.getTreasureInHand() > 7 and state.countInSupply(\"Province\") == 1\r\n              answer = 0\r\n    else\r\n          answer = state.countInSupply(\"Province\") > 0\r\n    return answer\r\n\r\n  rebuildPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Duchy\"\r\n    \"Estate\"\r\n  ]\r\n\r\n  nameVPPriority: (state, my) -> [\r\n    \"Duchy\" if  state.countInSupply(\"Duchy\") > 0 \\\r\n            and my.ai.countNotInHand(my, \"Estate\") > 0 \\\r\n            and (my.ai.countNotInHand(my, \"Province\") == 0 \\\r\n                or  (my.ai.countInDraw(my, \"Province\") == 0 \\\r\n                    and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n                    and my.ai.countInDraw(my, \"Estate\") > 0))\r\n    \"Province\" if my.ai.countInDraw(my, \"Estate\") == 0 \\\r\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n               and my.ai.countInDraw(my, \"Province\") > 0\r\n    \"Province\" if my.ai.countNotInHand(my, \"Estate\") == 0 \\\r\n               and my.ai.countNotInHand(my, \"Duchy\") > 0 \\\r\n               and my.ai.countNotInHand(my, \"Province\") > 0\r\n    \"Estate\" if my.countInHand(\"Rebuild\") + 1 >= state.countInSupply(\"Province\") \\\r\n             and my.ai.getScore(state, my) > 0\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\r\n             and my.ai.countInDraw(my, \"Province\") == 0\r\n    \"Province\" if state.countInSupply(\"Duchy\") == 0 \\\r\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n               and my.ai.countInDraw(my, \"Province\") > \\\r\n               my.ai.countInDraw(my, \"Estate\") \r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\r\n             and my.ai.countInDraw(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 2\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Estate\") > 0 \\\r\n             and my.ai.countNotInHand(my, \"Duchy\") < 3 \\\r\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 4\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.countInDeck(\"Duchy\") == 0 \\\r\n             and my.ai.getScore(state, my) > 0\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 2\r\n    \"Province\" if my.ai.countNotInHand(my, \"Province\") > 0\r\n    \"Estate\"\r\n  ]\r\n} \r\n","RebuildJack":"{\r\n  name: 'RebuildJack'\r\n  author: 'ragingduckd', 'SheCantSayNo'\r\n  requires: ['Rebuild', 'Jack of All Trades']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 3 and state.countInSupply(\"Rebuild\") == 8\r\n    \"Duchy\"\r\n    \"Estate\" if state.gainsToEndGame() <= 1\r\n    \"Estate\" if state.gainsToEndGame() == 2 and my.ai.getScore(state, my) > -8\r\n    \"Gold\"\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Rebuild\" if (my.countInDeck(\"Duchy\") > 0 or my.ai.getScore(state, my) > 2)\\\r\n                and (state.countInSupply(\"Rebuild\") > 2 or my.ai.getScore(state, my) > 3 \\\r\n                or (state.countInSupply(\"Rebuild\") == 1 and my.ai.getScore(state, my) > 0))\r\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\r\n                and my.countInDeck(\"Estate\") == 0 \\\r\n                and state.countInSupply(\"Duchy\") >= 4\r\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\r\n                and state.countInSupply(\"Duchy\") == 0\r\n    \"Jack of All Trades\" if my.countInDeck(\"Jack of All Trades\") == 0\r\n    \"Silver\"\r\n  ]\r\n\r\n  getScore: (state, my) -> \r\n    for status in state.getFinalStatus()\r\n      [name, score, turns] = status\r\n      if name == my.ai.toString()\r\n        myScore = score\r\n      else\r\n        opponentScore = score\r\n    return myScore - opponentScore\r\n\r\n  countNotInHand: (my, card) ->\r\n    return my.countInDeck(card) - my.countInHand(card)\r\n\r\n  countInDraw: (my, card) ->\r\n    return my.countInDeck(card) - my.countInHand(card) - my.countInDiscard(card)\r\n\r\n  wantsToRebuild: (state, my) ->\r\n    answer = 1\r\n    if state.countInSupply(\"Province\") == 1 \\\r\n            and my.ai.getScore(state, my) < -4\r\n              answer = 0\r\n    else if state.countInSupply(\"Duchy\") == 0 \\\r\n            and my.ai.countNotInHand(my, \"Duchy\") == 0\\\r\n            and my.ai.getScore(state, my) < 0\r\n              answer = 0\r\n    else if my.getTreasureInHand() > 7 and state.countInSupply(\"Province\") == 1\r\n              answer = 0\r\n    else\r\n          answer = state.countInSupply(\"Province\") > 0\r\n    return answer\r\n\r\n  rebuildPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Duchy\"\r\n    \"Estate\"\r\n  ]\r\n\r\n  nameVPPriority: (state, my) -> [\r\n    \"Duchy\" if  state.countInSupply(\"Duchy\") > 0 \\\r\n            and my.ai.countNotInHand(my, \"Estate\") > 0 \\\r\n            and (my.ai.countNotInHand(my, \"Province\") == 0 \\\r\n                or  (my.ai.countInDraw(my, \"Province\") == 0 \\\r\n                    and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n                    and my.ai.countInDraw(my, \"Estate\") > 0))\r\n    \"Province\" if my.ai.countInDraw(my, \"Estate\") == 0 \\\r\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n               and my.ai.countInDraw(my, \"Province\") > 0\r\n    \"Province\" if my.ai.countNotInHand(my, \"Estate\") == 0 \\\r\n               and my.ai.countNotInHand(my, \"Duchy\") > 0 \\\r\n               and my.ai.countNotInHand(my, \"Province\") > 0\r\n    \"Estate\" if my.countInHand(\"Rebuild\") + 1 >= state.countInSupply(\"Province\") \\\r\n             and my.ai.getScore(state, my) > 0\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\r\n             and my.ai.countInDraw(my, \"Province\") == 0\r\n    \"Province\" if state.countInSupply(\"Duchy\") == 0 \\\r\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n               and my.ai.countInDraw(my, \"Province\") > \\\r\n               my.ai.countInDraw(my, \"Estate\") \r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\r\n             and my.ai.countInDraw(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 2\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Estate\") > 0 \\\r\n             and my.ai.countNotInHand(my, \"Duchy\") < 3 \\\r\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 4\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.countInDeck(\"Duchy\") == 0 \\\r\n             and my.ai.getScore(state, my) > 0\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 2\r\n    \"Province\" if my.ai.countNotInHand(my, \"Province\") > 0\r\n    \"Estate\"\r\n  ]\r\n} \r\n","RebuildMonument":"{\r\n  name: 'RebuildMonument'\r\n  author: 'ragingduckd', 'SheCantSayNo'\r\n  requires: ['Rebuild', 'Monument']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 3 and state.countInSupply(\"Rebuild\") == 8\r\n    \"Duchy\"\r\n    \"Estate\" if state.gainsToEndGame() <= 1\r\n    \"Estate\" if state.gainsToEndGame() == 2 and my.ai.getScore(state, my) > -8\r\n    \"Gold\"\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Rebuild\" if (my.countInDeck(\"Duchy\") > 0 or my.ai.getScore(state, my) > 2)\\\r\n                and (state.countInSupply(\"Rebuild\") > 2 or my.ai.getScore(state, my) > 3 \\\r\n                or (state.countInSupply(\"Rebuild\") == 1 and my.ai.getScore(state, my) > 0))\r\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\r\n                and my.countInDeck(\"Estate\") == 0 \\\r\n                and state.countInSupply(\"Duchy\") >= 4\r\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\r\n                and state.countInSupply(\"Duchy\") == 0\r\n    \"Monument\" if my.countInDeck(\"Monument\") < 2\r\n    \"Silver\"\r\n  ]\r\n\r\n  getScore: (state, my) -> \r\n    for status in state.getFinalStatus()\r\n      [name, score, turns] = status\r\n      if name == my.ai.toString()\r\n        myScore = score\r\n      else\r\n        opponentScore = score\r\n    return myScore - opponentScore\r\n\r\n  countNotInHand: (my, card) ->\r\n    return my.countInDeck(card) - my.countInHand(card)\r\n\r\n  countInDraw: (my, card) ->\r\n    return my.countInDeck(card) - my.countInHand(card) - my.countInDiscard(card)\r\n\r\n  wantsToRebuild: (state, my) ->\r\n    if my.countInHand(\"Rebuild\") >= state.countInSupply(\"Province\") \\\r\n       and my.ai.getScore(state, my) > 0\r\n          answer = 1\r\n    else if state.countInSupply(\"Province\") == 1 \\\r\n            and my.ai.getScore(state, my) < -4\r\n              answer = 0\r\n    else if state.countInSupply(\"Duchy\") == 0 \\\r\n            and my.ai.countNotInHand(my, \"Duchy\") == 0\\\r\n            and my.ai.getScore(state, my) < 0\r\n              answer = 0\r\n    else if my.getTreasureInHand() > 7 and state.countInSupply(\"Province\") == 1\r\n              answer = 0\r\n    else\r\n          answer = state.countInSupply(\"Province\") > 0\r\n    return answer\r\n\r\n  rebuildPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Duchy\"\r\n    \"Estate\"\r\n  ]\r\n\r\n  nameVPPriority: (state, my) -> [\r\n    \"Duchy\" if  state.countInSupply(\"Duchy\") > 0 \\\r\n            and my.ai.countNotInHand(my, \"Estate\") > 0 \\\r\n            and (my.ai.countNotInHand(my, \"Province\") == 0 \\\r\n                or  (my.ai.countInDraw(my, \"Province\") == 0 \\\r\n                    and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n                    and my.ai.countInDraw(my, \"Estate\") > 0))\r\n    \"Province\" if my.ai.countInDraw(my, \"Estate\") == 0 \\\r\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n               and my.ai.countInDraw(my, \"Province\") > 0\r\n    \"Province\" if my.ai.countNotInHand(my, \"Estate\") == 0 \\\r\n               and my.ai.countNotInHand(my, \"Duchy\") > 0 \\\r\n               and my.ai.countNotInHand(my, \"Province\") > 0\r\n    \"Estate\" if my.countInHand(\"Rebuild\") + 1 >= state.countInSupply(\"Province\") \\\r\n             and my.ai.getScore(state, my) > 0\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\r\n             and my.ai.countInDraw(my, \"Province\") == 0\r\n    \"Province\" if state.countInSupply(\"Duchy\") == 0 \\\r\n               and my.ai.countInDraw(my, \"Duchy\") > 0 \\\r\n               and my.ai.countInDraw(my, \"Province\") > \\\r\n               my.ai.countInDraw(my, \"Estate\") \r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countInDraw(my, \"Estate\") > 0 \\\r\n             and my.ai.countInDraw(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 2\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Estate\") > 0 \\\r\n             and my.ai.countNotInHand(my, \"Duchy\") < 3 \\\r\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 4\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.countInDeck(\"Duchy\") == 0 \\\r\n             and my.ai.getScore(state, my) > 0\r\n    \"Estate\" if state.countInSupply(\"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Duchy\") == 0 \\\r\n             and my.ai.countNotInHand(my, \"Province\") > 0 \\\r\n             and my.ai.getScore(state, my) > 2\r\n    \"Province\" if my.ai.countNotInHand(my, \"Province\") > 0\r\n    \"Estate\"\r\n  ]\r\n} ","RebuildRogue":"{\r\n  name: 'RebuildRogue'\r\n  author: 'ragingduckd', 'SheCantSayNo'\r\n  requires: ['Rebuild', 'Rogue']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\"    \r\n    \"Rebuild\" if my.countInDeck(\"Rebuild\") < 2\r\n    \"Rogue\" if my.countInDeck(\"Rogue\") == 0\r\n    \"Duchy\"\r\n    \"Rogue\" \r\n    \"Rebuild\"\r\n    \"Estate\" if my.countInDeck(\"Duchy\") == 0 \\\r\n             and my.countInDeck(\"Estate\") == 0 \\\r\n             and my.countInDeck(\"Rebuild\") == 2 \\\r\n             and state.countInSupply(\"Duchy\") >= 4\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Silver\"\r\n  ]\r\n\r\n  rogueGainValue: (state, card, my) ->\r\n    if state.gainsToEndGame() <= 4\r\n      return card.getVP(my)\r\n    else\r\n      [coins, potions] = card.getCost(state)\r\n      return coins\r\n\r\n  rogueTrashValue: (state, card, my) ->\r\n    if state.gainsToEndGame() <= 4\r\n      return -card.getVP(my.getDeck())\r\n    else\r\n      [coins, potions] = card.getCost(state)\r\n      return -coins\r\n\r\n  wantsToRebuild: (state, my) ->\r\n    return state.countInSupply(\"Province\") > 0\r\n\r\n  rebuildPriority: (state, my) -> [\r\n    \"Province\"\r\n    \"Duchy\"\r\n    \"Estate\"\r\n  ]\r\n\r\n  nameVPPriority: (state, my) -> [\r\n    \"Duchy\" if state.countInSupply(\"Duchy\") > 0 \\\r\n            and my.countInDeck(\"Estate\") - my.countInHand(\"Estate\") > 0 \\\r\n            and my.countInDeck(\"Province\") - my.countInHand(\"Province\") < \\\r\n            (my.countInDeck(\"Estate\") - my.countInHand(\"Estate\"))\r\n    \"Province\" if my.countInDeck(\"Duchy\") - my.countInHand(\"Duchy\") > 0 \r\n    \"Estate\"\r\n  ]\r\n}\r\n","Remaker":"{\r\n  name: 'Remaker'\r\n  requires: ['Remake']\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" if my.countInDeck(\"Gold\") > 0\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Remake\" if my.countInDeck(\"Remake\") == 0\r\n    \"Silver\"\r\n\r\n    # Some inoffensive $4, $5, and $7 cards, in case it needs them:\r\n    \"Expand\"\r\n    \"Laboratory\"\r\n    \"Caravan\"\r\n  ]\r\n}\r\n","RoyalBigMoney":"{\r\n  name: 'Royal Big Money'\r\n  requires: ['Royal Seal']\r\n  gainPriority: (state, my) -> \r\n    if state.supply.Colony?\r\n      [\r\n        \"Colony\" if my.getTotalMoney() > 32\r\n        \"Province\" if state.gainsToEndGame() <= 6\r\n        \"Duchy\" if state.gainsToEndGame() <= 5\r\n        \"Estate\" if state.gainsToEndGame() <= 2\r\n        \"Platinum\"\r\n        \"Province\" if state.countInSupply(\"Colony\") <= 7\r\n        \"Gold\"\r\n        \"Duchy\" if state.gainsToEndGame() <= 6\r\n        \"Royal Seal\"\r\n        \"Silver\"\r\n        \"Copper\" if state.gainsToEndGame() <= 2\r\n      ]\r\n    else\r\n      [\r\n        \"Province\" if my.getTotalMoney() > 18\r\n        \"Duchy\" if state.gainsToEndGame() <= 4\r\n        \"Estate\" if state.gainsToEndGame() <= 2\r\n        \"Gold\"\r\n        \"Duchy\" if state.gainsToEndGame() <= 6\r\n        \"Royal Seal\"\r\n        \"Silver\"\r\n      ]\r\n}\r\n\r\n","SchemeWitch":"{\r\n  name: 'SchemeWitch'\r\n  requires: ['Witch', 'Scheme']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\r\n    \"Witch\" if my.countInDeck(\"Witch\") == 0\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Scheme\" if my.countInDeck('Scheme') < 2 and my.countInDeck('Silver') > 0\r\n    \"Silver\"\r\n  ]\r\n}\r\n","SillyAI":"# SillyAI's strategy is to buy an arbitrary card with the highest available\r\n# cost. It does a reasonable job of playing like a newbie, it occasionally\r\n# gets lucky and pulls off nice combos, and it tests a lot of possible\r\n# states of the game.\r\n{\r\n  name: 'SillyAI'\r\n  author: 'rspeer'\r\n  requires: []\r\n  gainPriority: (state, my) -> []\r\n  gainValue: (state, card, my) ->\r\n    if my.turnsTaken > 100 and card isnt null\r\n      # oh god, just make it stop\r\n      return 1\r\n    if card.name is \"Copper\" or card.name is \"Curse\"\r\n      return -1\r\n    else\r\n      [coins, potions] = card.getCost(state)\r\n      return coins + potions*2 + Math.random()\r\n}\r\n","SingleBaron":"{\r\n  name: 'SingleBaron'\r\n  requires: ['Baron']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\r\n    \"Duchy\" if state.gainsToEndGame() <= 5\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Baron\" if my.countInDeck(\"Baron\") == 0\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 2\r\n  ]\r\n  \r\n  discardPriority: (state, my) -> [\r\n    \"Colony\"\r\n    \"Province\"\r\n    \"Duchy\"\r\n    \"Curse\"\r\n    \"Estate\" if my.countInHand(\"Baron\") == 0 \\\r\n             or my.countInHand(\"Estate\") > 1\r\n    \"Copper\"\r\n    \"Baron\" if my.countInHand(\"Estate\") == 0\r\n    null\r\n    \"Silver\"\r\n    \"Estate\"\r\n    \"Baron\"\r\n  ]\r\n\r\n}\r\n","SingleWitch":"{\r\n  name: 'SingleWitch'\r\n  requires: ['Witch']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 and my.countInDeck(\"Gold\") > 0\r\n    \"Witch\" if my.countInDeck(\"Witch\") == 0\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Silver\"\r\n  ]\r\n}\r\n","TestPlaza":"{\r\n  name: 'Plaza'\r\n  author: 'DStu'\r\n  requires: [\"Plaza\"]\r\n  gainPriority: (state, my) -> [\r\n    \"Province\" \r\n    \"Duchy\" if state.gainsToEndGame() <= 5\r\n    \"Estate\" if state.gainsToEndGame() <= 2\r\n    \"Gold\"\r\n    \"Plaza\" if my.countInDeck(\"Plaza\") < 3\r\n    \"Silver\"\r\n  ]  \r\n}\r\n","TournamentPlayer":"{\r\n  name: \"TournamentPlayer\"\r\n  author: 'rspeer'\r\n  requires: ['Tournament']\r\n  gainPriority: (state, my) -> [\r\n    \"Colony\" if my.countInDeck(\"Platinum\") > 0\r\n    \"Province\"\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Followers\"\r\n    \"Trusty Steed\"\r\n    \"Bag of Gold\"\r\n    \"Princess\"\r\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\r\n    \"Diadem\"\r\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\r\n    \"Platinum\"\r\n    \"Gold\"\r\n    \"Tournament\"\r\n    \"Silver\"\r\n    \"Copper\" if state.gainsToEndGame() <= 3\r\n  ]\r\n  \r\n  discardPriority: (state, my) -> [\r\n    \"Colony\"\r\n    \"Duchy\"\r\n    \"Curse\"\r\n    \"Estate\"\r\n    \"Province\" if my.countInHand(\"Tournament\") == 0 \\\r\n               or my.countInHand(\"Province\") > 1\r\n    \"Copper\"\r\n    null\r\n    \"Silver\"\r\n    \"Gold\"\r\n  ]\r\n\r\n}\r\n"}
